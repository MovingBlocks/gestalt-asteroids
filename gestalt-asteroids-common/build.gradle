import org.reflections.Reflections
import org.reflections.scanners.ResourcesScanner
import org.reflections.scanners.SubTypesScanner
import org.reflections.scanners.TypeAnnotationsScanner
import org.reflections.serializers.JsonSerializer

apply plugin: 'java-library'

project.ext.jomlVersion = "1.9.19"

repositories {
    jcenter()
    maven {
        url "http://artifactory.terasology.org/artifactory/virtual-repo-live"
    }
    mavenLocal()
}

// Primary dependencies definition
dependencies {
    api "org.joml:joml:${jomlVersion}"
    api "com.google.guava:guava:27.0.1-android"

    api "org.terasology.gestalt:gestalt-entity-system:7.0.4-SNAPSHOT"
    api "org.terasology.gestalt:gestalt-module:7.0.4-SNAPSHOT"
    api "org.terasology.gestalt:gestalt-asset-core:7.0.4-SNAPSHOT"
    api "org.terasology.gestalt:gestalt-util:7.0.4-SNAPSHOT"

    annotationProcessor project(":gestalt-di")
    implementation project(":gestalt-di")

    implementation 'de.matthiasmann.twl:PNGDecoder:1111'
    implementation 'com.google.code.gson:gson:2.8.6'

    implementation "org.slf4j:slf4j-api:$slf4j_version"
    implementation "com.android.support:support-annotations:$android_annotation_version"
    implementation "net.jcip:jcip-annotations:$jcip_annotation_version"

    testImplementation "junit:junit:$junit_version"
    testImplementation "ch.qos.logback:logback-classic:$logback_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

def reflect() {
    def resourcesPath = sourceSets.find { it.name == 'main' }.resources.srcDirs
    def classPath = files { compileJava.destinationDir }
    URL[] scanUrls = classPath.collect { it.toURI().toURL() } + resourcesPath.collect {
        it.toURI().toURL()
    }
    URL[] classLoaderUrls = scanUrls + compileJava.classpath.collect { it.toURI().toURL() }

    ClassLoader classLoader = new URLClassLoader(classLoaderUrls, getClass().getClassLoader())
    org.reflections.Configuration config = new org.reflections.util.ConfigurationBuilder()
    config.addClassLoader(classLoader)
    config.setUrls(scanUrls)

    config.addScanners(new ResourcesScanner(), new SubTypesScanner(false), new TypeAnnotationsScanner().filterResultsBy()).forPackages("org.terasology.gestalt.example.asteroids.modules.engine")
    Reflections reflections = new Reflections(config)
    JsonSerializer serializer = new JsonSerializer()
    def outPath = compileJava.destinationDir.toString() + "/org/terasology/gestalt/example/asteroids/modules/engine/manifest.json"
    serializer.save(reflections, outPath)
}

compileJava.doLast {
    reflect()
}
